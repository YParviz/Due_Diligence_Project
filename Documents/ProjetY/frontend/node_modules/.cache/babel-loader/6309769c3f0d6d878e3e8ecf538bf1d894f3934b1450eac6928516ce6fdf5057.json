{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Miskinyar\\\\Documents\\\\ProjetY\\\\my-first-react-app\\\\src\\\\context\\\\authContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const authContext = /*#__PURE__*/createContext(); /*Création du contexte d'authentification (authContext)*/\n\nexport const useAuth = () => {\n  _s();\n  const context = useContext(authContext);\n  if (!context) throw new Error('There is not AuthProvider');\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst client = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/' /*crée une instance d'Axios*/\n});\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState({\n    loged: false,\n    data: [],\n    dili: ''\n  });\n  const login = data => {\n    if (user.loged) return console.log(\"User is already logged\");\n    return client.post('login/', data).then(res => {\n      if (res.status !== 202) throw new Error(res.data['error']);\n      setUser({\n        ...user,\n        loged: true,\n        data: res.data\n      });\n    }).catch(err => {\n      throw new Error(err);\n    });\n  };\n  const logout = () => {\n    if (!user.loged) return console.log(\"User is not logged\");\n    return client.post('logout/').then(res => {\n      console.log(res);\n    });\n  };\n  const signup = data => {\n    console.log(data);\n    return client.post('/register', data); // Utilisation de l'instance Axios créée précédemment et de la route '/register'\n  };\n  const resetPassword = async email => {\n    // Implémentons la logique pour réinitialiser le mot de passe ici\n    try {\n      // Envoyer une requête HTTP pour réinitialiser le mot de passe avec l'e-mail spécifié\n      const response = await client.post('/reset-password', {\n        email\n      });\n      console.log(response.data); // Supposons que l'API renvoie un message de succès\n      // Mettre à jour l'état de message ou effectuer toute autre action nécessaire\n      return response.data; // Ajouter cette ligne pour renvoyer la réponse\n    } catch (error) {\n      // Gérer les erreurs, par exemple si l'e-mail n'existe pas dans la base de données\n      console.error(error);\n      throw new Error('An error occurred while resetting the password');\n    }\n  };\n  const contextValue = {\n    login,\n    logout,\n    user,\n    setUser,\n    signup,\n    resetPassword,\n    client\n  };\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"LdKlpd1Edg+tU/AqaP121DuH9bM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","axios","jsxDEV","_jsxDEV","authContext","useAuth","_s","context","Error","client","create","baseURL","AuthProvider","children","_s2","loading","setLoading","user","setUser","loged","data","dili","login","console","log","post","then","res","status","catch","err","logout","signup","resetPassword","email","response","error","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Miskinyar/Documents/ProjetY/my-first-react-app/src/context/authContext.jsx"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport const authContext = createContext(); /*Création du contexte d'authentification (authContext)*/\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(authContext);\r\n    if (!context) throw new Error('There is not AuthProvider');\r\n    return context;\r\n}\r\n\r\nconst client = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/', /*crée une instance d'Axios*/\r\n});\r\n\r\nexport function AuthProvider({ children }) {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [user, setUser] = useState({\r\n        loged: false,\r\n        data: [],\r\n        dili: ''\r\n    });\r\n\r\n    const login = (data) => {\r\n        if (user.loged) return console.log(\"User is already logged\");\r\n        return client.post('login/', data)\r\n            .then(res => {\r\n                if (res.status !== 202) throw new Error(res.data['error']);\r\n                setUser({ ...user, loged: true, data: res.data });\r\n            })\r\n            .catch(err => {\r\n                throw new Error(err);\r\n            });\r\n    }\r\n\r\n    const logout = () => {\r\n        if (!user.loged) return console.log(\"User is not logged\");\r\n        return client.post('logout/')\r\n            .then(res => {\r\n                console.log(res);\r\n            });\r\n    }\r\n\r\n    const signup = (data) => {\r\n        console.log(data);\r\n        return client.post('/register', data); // Utilisation de l'instance Axios créée précédemment et de la route '/register'\r\n    }\r\n    const resetPassword = async (email) => {\r\n        // Implémentons la logique pour réinitialiser le mot de passe ici\r\n        try {\r\n            // Envoyer une requête HTTP pour réinitialiser le mot de passe avec l'e-mail spécifié\r\n            const response = await client.post('/reset-password', { email });\r\n            console.log(response.data); // Supposons que l'API renvoie un message de succès\r\n            // Mettre à jour l'état de message ou effectuer toute autre action nécessaire\r\n            return response.data; // Ajouter cette ligne pour renvoyer la réponse\r\n        } catch (error) {\r\n            // Gérer les erreurs, par exemple si l'e-mail n'existe pas dans la base de données\r\n            console.error(error);\r\n            throw new Error('An error occurred while resetting the password');\r\n        }\r\n    };\r\n    \r\n    const contextValue = { login, logout, user, setUser, signup, resetPassword, client };\r\n\r\n\r\n    return (\r\n        <authContext.Provider value={contextValue}>\r\n            {children}\r\n        </authContext.Provider>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}