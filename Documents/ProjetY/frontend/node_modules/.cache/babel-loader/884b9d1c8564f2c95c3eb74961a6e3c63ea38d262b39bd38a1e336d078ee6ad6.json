{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Miskinyar\\\\Documents\\\\ProjetY\\\\my-first-react-app\\\\src\\\\context\\\\authContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const authContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(authContext);\n  if (!context) throw new Error('There is not AuthProvaider');\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst client = axios.create({\n  baseURL: 'http://127.0.0.1:8000/api/'\n});\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState({\n    loged: false,\n    data: [],\n    dili: ''\n  });\n  const login = data => {\n    if (user.loged) return console.log(\"User is already loged\");\n    return client.post('login/', data).then(res => {\n      if (res.status !== 202) throw new Error(res.data['error']);\n      setUser({\n        ...user,\n        loged: true,\n        data: res.data\n      });\n    }).catch(err => {\n      throw new Error(err);\n    });\n  };\n  const logout = () => {\n    if (!user.loged) return console.log(\"User is not loged\");\n    return client.post('logout/').then(res => {\n      console.log(res);\n    });\n  };\n  const signup = data => {\n    console.log(data);\n    return axios.post('http://127.0.0.1:8000/api/register/', data);\n  };\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: {\n      login,\n      logout,\n      user,\n      setUser,\n      signup,\n      client\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"LdKlpd1Edg+tU/AqaP121DuH9bM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","axios","jsxDEV","_jsxDEV","authContext","useAuth","_s","context","Error","client","create","baseURL","AuthProvider","children","_s2","loading","setLoading","user","setUser","loged","data","dili","login","console","log","post","then","res","status","catch","err","logout","signup","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Miskinyar/Documents/ProjetY/my-first-react-app/src/context/authContext.jsx"],"sourcesContent":["import { createContext,useContext, useState } from \"react\";\r\nimport axios from 'axios';\r\nexport const authContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(authContext);\r\n    if (!context) throw new Error('There is not AuthProvaider');\r\n    return context;\r\n}\r\n\r\n\r\nconst client = axios.create({\r\n    baseURL: 'http://127.0.0.1:8000/api/',\r\n});\r\n\r\nexport function AuthProvider({children}) {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [user, setUser] = useState({\r\n        loged: false,\r\n        data: [],\r\n        dili: ''\r\n    });\r\n    \r\n    const login =  (data) => {\r\n        if (user.loged) return console.log(\"User is already loged\");\r\n        return client.post('login/', data)\r\n            .then(res => {\r\n                if (res.status !== 202) throw new Error(res.data['error']);\r\n                setUser({...user, loged: true, data : res.data});\r\n            })\r\n            .catch(err => {\r\n                throw new Error(err);\r\n            });\r\n    }\r\n\r\n    const logout = () => {\r\n        if (!user.loged) return console.log(\"User is not loged\");\r\n        return client.post('logout/')\r\n            .then(res => {\r\n                console.log(res);\r\n            })\r\n    }\r\n\r\n    const signup = (data) => {\r\n        console.log(data);\r\n        return axios.post('http://127.0.0.1:8000/api/register/', data)\r\n    }\r\n\r\n    return (\r\n        <authContext.Provider value={{login,logout, user, setUser, signup, client}}>\r\n            {children}\r\n        </authContext.Provider>\r\n    )\r\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAACC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC3D,OAAOD,OAAO;AAClB,CAAC;AAAAD,EAAA,CAJYD,OAAO;AAOpB,MAAMI,MAAM,GAAGR,KAAK,CAACS,MAAM,CAAC;EACxBC,OAAO,EAAE;AACb,CAAC,CAAC;AAEF,OAAO,SAASC,YAAYA,CAAC;EAACC;AAAQ,CAAC,EAAE;EAAAC,GAAA;EACrC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAM,CAACiB,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC;IAC7BmB,KAAK,EAAE,KAAK;IACZC,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE;EACV,CAAC,CAAC;EAEF,MAAMC,KAAK,GAAKF,IAAI,IAAK;IACrB,IAAIH,IAAI,CAACE,KAAK,EAAE,OAAOI,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IAC3D,OAAOf,MAAM,CAACgB,IAAI,CAAC,QAAQ,EAAEL,IAAI,CAAC,CAC7BM,IAAI,CAACC,GAAG,IAAI;MACT,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE,MAAM,IAAIpB,KAAK,CAACmB,GAAG,CAACP,IAAI,CAAC,OAAO,CAAC,CAAC;MAC1DF,OAAO,CAAC;QAAC,GAAGD,IAAI;QAAEE,KAAK,EAAE,IAAI;QAAEC,IAAI,EAAGO,GAAG,CAACP;MAAI,CAAC,CAAC;IACpD,CAAC,CAAC,CACDS,KAAK,CAACC,GAAG,IAAI;MACV,MAAM,IAAItB,KAAK,CAACsB,GAAG,CAAC;IACxB,CAAC,CAAC;EACV,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACjB,IAAI,CAACd,IAAI,CAACE,KAAK,EAAE,OAAOI,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IACxD,OAAOf,MAAM,CAACgB,IAAI,CAAC,SAAS,CAAC,CACxBC,IAAI,CAACC,GAAG,IAAI;MACTJ,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;IACpB,CAAC,CAAC;EACV,CAAC;EAED,MAAMK,MAAM,GAAIZ,IAAI,IAAK;IACrBG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;IACjB,OAAOnB,KAAK,CAACwB,IAAI,CAAC,qCAAqC,EAAEL,IAAI,CAAC;EAClE,CAAC;EAED,oBACIjB,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAACZ,KAAK;MAACS,MAAM;MAAEd,IAAI;MAAEC,OAAO;MAAEc,MAAM;MAAEvB;IAAM,CAAE;IAAAI,QAAA,EACtEA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAACxB,GAAA,CAvCeF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}