{"ast":null,"code":"userApi.js; // userApi.js\nimport api from './axiosConfig';\nconst API_URL = 'users/';\nconst API_REGISTER_URL = 'register/';\nconst API_LOGIN_URL = 'login/';\n\n// Fonction pour obtenir les utilisateurs\n// userApi.js\n\nexport async function getUsers() {\n  try {\n    const response = await api.get('users/');\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch users');\n  }\n}\n\n// Autres fonctions similaires\n\n// Fonction pour mettre à jour un utilisateur\nexport async function updateUser(userId, updatedData) {\n  const url = `${API_URL}${userId}/`;\n  try {\n    const response = await api.patch(url, updatedData);\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to update user with ID ${userId}`);\n  }\n}\n\n// Fonction pour obtenir un utilisateur par ID\nexport async function getUserById(userId) {\n  const url = `${API_URL}${userId}/`;\n  try {\n    const response = await api.get(url);\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to fetch user with ID ${userId}`);\n  }\n}\n\n// Fonction pour créer un nouveau compte utilisateur\nexport async function registerUser(userData) {\n  try {\n    const response = await api.post(API_REGISTER_URL, userData);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to register user');\n  }\n}\n\n// Fonction pour se connecter et obtenir un token\nexport async function loginUser(username, password) {\n  try {\n    const response = await api.post(API_LOGIN_URL, {\n      username: username,\n      password: password\n    });\n    const token = response.data.token;\n    localStorage.setItem('token', token);\n    console.log('Token:', token);\n  } catch (error) {\n    console.error('Login error:', error);\n    throw new Error('Failed to login');\n  }\n}","map":{"version":3,"names":["userApi","js","api","API_URL","API_REGISTER_URL","API_LOGIN_URL","getUsers","response","get","data","error","Error","updateUser","userId","updatedData","url","patch","getUserById","registerUser","userData","post","loginUser","username","password","token","localStorage","setItem","console","log"],"sources":["C:/Users/Miskinyar/Documents/ProjetY/frontend/src/api/userApi.js"],"sourcesContent":["userApi.js // userApi.js\r\nimport api from './axiosConfig';\r\n\r\nconst API_URL = 'users/';\r\nconst API_REGISTER_URL = 'register/';\r\nconst API_LOGIN_URL = 'login/';\r\n\r\n// Fonction pour obtenir les utilisateurs\r\n// userApi.js\r\n\r\n\r\nexport async function getUsers() {\r\n    try {\r\n        const response = await api.get('users/');\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error('Failed to fetch users');\r\n    }\r\n}\r\n\r\n// Autres fonctions similaires\r\n\r\n\r\n// Fonction pour mettre à jour un utilisateur\r\nexport async function updateUser(userId, updatedData) {\r\n    const url = `${API_URL}${userId}/`;\r\n    try {\r\n        const response = await api.patch(url, updatedData);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(`Failed to update user with ID ${userId}`);\r\n    }\r\n}\r\n\r\n// Fonction pour obtenir un utilisateur par ID\r\nexport async function getUserById(userId) {\r\n    const url = `${API_URL}${userId}/`;\r\n    try {\r\n        const response = await api.get(url);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(`Failed to fetch user with ID ${userId}`);\r\n    }\r\n}\r\n\r\n// Fonction pour créer un nouveau compte utilisateur\r\nexport async function registerUser(userData) {\r\n    try {\r\n        const response = await api.post(API_REGISTER_URL, userData);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error('Failed to register user');\r\n    }\r\n}\r\n\r\n// Fonction pour se connecter et obtenir un token\r\nexport async function loginUser(username, password) {\r\n    try {\r\n        const response = await api.post(API_LOGIN_URL, {\r\n            username: username,\r\n            password: password\r\n        });\r\n        const token = response.data.token;\r\n        localStorage.setItem('token', token);\r\n        console.log('Token:', token);\r\n    } catch (error) {\r\n        console.error('Login error:', error);\r\n        throw new Error('Failed to login');\r\n    }\r\n}"],"mappings":"AAAAA,OAAO,CAACC,EAAE,EAAC;AACX,OAAOC,GAAG,MAAM,eAAe;AAE/B,MAAMC,OAAO,GAAG,QAAQ;AACxB,MAAMC,gBAAgB,GAAG,WAAW;AACpC,MAAMC,aAAa,GAAG,QAAQ;;AAE9B;AACA;;AAGA,OAAO,eAAeC,QAAQA,CAAA,EAAG;EAC7B,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;AACJ;;AAEA;;AAGA;AACA,OAAO,eAAeC,UAAUA,CAACC,MAAM,EAAEC,WAAW,EAAE;EAClD,MAAMC,GAAG,GAAG,GAAGZ,OAAO,GAAGU,MAAM,GAAG;EAClC,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAML,GAAG,CAACc,KAAK,CAACD,GAAG,EAAED,WAAW,CAAC;IAClD,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,iCAAiCE,MAAM,EAAE,CAAC;EAC9D;AACJ;;AAEA;AACA,OAAO,eAAeI,WAAWA,CAACJ,MAAM,EAAE;EACtC,MAAME,GAAG,GAAG,GAAGZ,OAAO,GAAGU,MAAM,GAAG;EAClC,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAACO,GAAG,CAAC;IACnC,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,gCAAgCE,MAAM,EAAE,CAAC;EAC7D;AACJ;;AAEA;AACA,OAAO,eAAeK,YAAYA,CAACC,QAAQ,EAAE;EACzC,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAML,GAAG,CAACkB,IAAI,CAAChB,gBAAgB,EAAEe,QAAQ,CAAC;IAC3D,OAAOZ,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC9C;AACJ;;AAEA;AACA,OAAO,eAAeU,SAASA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAChD,IAAI;IACA,MAAMhB,QAAQ,GAAG,MAAML,GAAG,CAACkB,IAAI,CAACf,aAAa,EAAE;MAC3CiB,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;IACd,CAAC,CAAC;IACF,MAAMC,KAAK,GAAGjB,QAAQ,CAACE,IAAI,CAACe,KAAK;IACjCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;IACpCG,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEJ,KAAK,CAAC;EAChC,CAAC,CAAC,OAAOd,KAAK,EAAE;IACZiB,OAAO,CAACjB,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACtC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}