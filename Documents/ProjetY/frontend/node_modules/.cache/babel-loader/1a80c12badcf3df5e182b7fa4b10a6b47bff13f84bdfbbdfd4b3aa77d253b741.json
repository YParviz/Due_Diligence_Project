{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://127.0.0.1:8000/api/users/';\n\n// Fonction pour obtenir le token d'authentification depuis le stockage local ou de session\nfunction getAuthToken() {\n  const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n  return token ? `Token ${token}` : null;\n}\nexport async function getUsers() {\n  try {\n    const token = getAuthToken();\n    console.log(\"Token used in getUsers request:\", token); // Ajout du log pour vérifier le token\n    const config = {\n      headers: {\n        Authorization: token\n      }\n    };\n    const response = await axios.get(API_URL, config);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch users');\n  }\n}\nexport async function updateUser(userId, updatedData) {\n  const url = `${API_URL}${userId}/`;\n  try {\n    const token = getAuthToken();\n    const config = {\n      headers: {\n        Authorization: token\n      }\n    };\n    const response = await axios.patch(url, updatedData, config);\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to update user with ID ${userId}`);\n  }\n}\nexport async function getUserById(userId) {\n  const url = `${API_URL}${userId}/`;\n  try {\n    const token = getAuthToken();\n    const config = {\n      headers: {\n        Authorization: token\n      }\n    };\n    const response = await axios.get(url, config);\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to fetch user with ID ${userId}`);\n  }\n}\nconst API_REGISTER_URL = 'http://127.0.0.1:8000/api/register/';\nexport async function registerUser(userData) {\n  try {\n    const response = await axios.post(API_REGISTER_URL, userData);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to register user');\n  }\n}","map":{"version":3,"names":["axios","API_URL","getAuthToken","token","localStorage","getItem","sessionStorage","getUsers","console","log","config","headers","Authorization","response","get","data","error","Error","updateUser","userId","updatedData","url","patch","getUserById","API_REGISTER_URL","registerUser","userData","post"],"sources":["C:/Users/Miskinyar/Documents/ProjetY/my-first-react-app/src/api/userApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://127.0.0.1:8000/api/users/';\r\n\r\n// Fonction pour obtenir le token d'authentification depuis le stockage local ou de session\r\nfunction getAuthToken() {\r\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\r\n    return token ? `Token ${token}` : null;\r\n}\r\n\r\nexport async function getUsers() {\r\n    try {\r\n        const token = getAuthToken();\r\n        console.log(\"Token used in getUsers request:\", token); // Ajout du log pour vérifier le token\r\n        const config = {\r\n            headers: {\r\n                Authorization: token,\r\n            },\r\n        };\r\n        const response = await axios.get(API_URL, config);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error('Failed to fetch users');\r\n    }\r\n}\r\n\r\n\r\nexport async function updateUser(userId, updatedData) {\r\n    const url = `${API_URL}${userId}/`;\r\n    try {\r\n        const token = getAuthToken();\r\n        const config = {\r\n            headers: {\r\n                Authorization: token,\r\n            },\r\n        };\r\n        const response = await axios.patch(url, updatedData, config);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(`Failed to update user with ID ${userId}`);\r\n    }\r\n}\r\n\r\nexport async function getUserById(userId) {\r\n    const url = `${API_URL}${userId}/`;\r\n    try {\r\n        const token = getAuthToken();\r\n        const config = {\r\n            headers: {\r\n                Authorization: token,\r\n            },\r\n        };\r\n        const response = await axios.get(url, config);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(`Failed to fetch user with ID ${userId}`);\r\n    }\r\n}\r\n\r\nconst API_REGISTER_URL = 'http://127.0.0.1:8000/api/register/';\r\n\r\nexport async function registerUser(userData) {\r\n    try {\r\n        const response = await axios.post(API_REGISTER_URL, userData);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error('Failed to register user');\r\n    }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kCAAkC;;AAElD;AACA,SAASC,YAAYA,CAAA,EAAG;EACpB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,OAAO,CAAC;EAC9E,OAAOF,KAAK,GAAI,SAAQA,KAAM,EAAC,GAAG,IAAI;AAC1C;AAEA,OAAO,eAAeI,QAAQA,CAAA,EAAG;EAC7B,IAAI;IACA,MAAMJ,KAAK,GAAGD,YAAY,CAAC,CAAC;IAC5BM,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEN,KAAK,CAAC,CAAC,CAAC;IACvD,MAAMO,MAAM,GAAG;MACXC,OAAO,EAAE;QACLC,aAAa,EAAET;MACnB;IACJ,CAAC;IACD,MAAMU,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAACb,OAAO,EAAES,MAAM,CAAC;IACjD,OAAOG,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;AACJ;AAGA,OAAO,eAAeC,UAAUA,CAACC,MAAM,EAAEC,WAAW,EAAE;EAClD,MAAMC,GAAG,GAAI,GAAEpB,OAAQ,GAAEkB,MAAO,GAAE;EAClC,IAAI;IACA,MAAMhB,KAAK,GAAGD,YAAY,CAAC,CAAC;IAC5B,MAAMQ,MAAM,GAAG;MACXC,OAAO,EAAE;QACLC,aAAa,EAAET;MACnB;IACJ,CAAC;IACD,MAAMU,QAAQ,GAAG,MAAMb,KAAK,CAACsB,KAAK,CAACD,GAAG,EAAED,WAAW,EAAEV,MAAM,CAAC;IAC5D,OAAOG,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAE,iCAAgCE,MAAO,EAAC,CAAC;EAC9D;AACJ;AAEA,OAAO,eAAeI,WAAWA,CAACJ,MAAM,EAAE;EACtC,MAAME,GAAG,GAAI,GAAEpB,OAAQ,GAAEkB,MAAO,GAAE;EAClC,IAAI;IACA,MAAMhB,KAAK,GAAGD,YAAY,CAAC,CAAC;IAC5B,MAAMQ,MAAM,GAAG;MACXC,OAAO,EAAE;QACLC,aAAa,EAAET;MACnB;IACJ,CAAC;IACD,MAAMU,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAACO,GAAG,EAAEX,MAAM,CAAC;IAC7C,OAAOG,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAE,gCAA+BE,MAAO,EAAC,CAAC;EAC7D;AACJ;AAEA,MAAMK,gBAAgB,GAAG,qCAAqC;AAE9D,OAAO,eAAeC,YAAYA,CAACC,QAAQ,EAAE;EACzC,IAAI;IACA,MAAMb,QAAQ,GAAG,MAAMb,KAAK,CAAC2B,IAAI,CAACH,gBAAgB,EAAEE,QAAQ,CAAC;IAC7D,OAAOb,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC9C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}